import mongoose from 'mongoose';
import bcrypt from 'bcryptjs'

const adminSchema = mongoose.Schema({
    name: {
        type: String,
        required: true,
    },
    email: {
        type: String,
        required: true,
        unique: true,
    },
    password: {
        type: String,
        required: true,
    }
}, {
    timeStamps: true
});


// ============= Password Hashing Middleware =============
adminSchema.pre('save', async function (next) {
    if (!this.isModified('password')) {
        next()

        // If the existing password in admin schema was not modified, then avoid hashing and move to next middleware
        // This check is done here because the admin schema will have other updates which doesn't involve password update
        // in that case rehashing password will be skipped
    }

    const salt = await bcrypt.genSalt(10)

    // Hashing the new password using the salt generated by bcrypt
    this.password = await bcrypt.hash(this.password, salt)
})


// ============= Password Verifying Function =============
adminSchema.methods.matchPassword = async function (adminProvidedPassword) {
    const validPassword = await bcrypt.compare(adminProvidedPassword, this.password)
    return validPassword
}


const Admin = mongoose.model('Admin', adminSchema);

export default Admin;
